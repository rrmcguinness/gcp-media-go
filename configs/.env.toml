[application]
name = "media-search"
google_project_id = ""
location = "us-central1"
google_api_key = ""
thread_pool_size = 10

[big_query_data_source]
dataset = "media_ds"
media_table = "media"
embedding_table = "scene_embeddings"

[topic_subscriptions."HiResTopic"]
name = "media_high_res_resources_subscription"
dead_letter_topic = "media_high_res_events_dead_letter"
timeout_in_seconds = 10

[topic_subscriptions."LowResTopic"]
name = "media_low_res_resources_subscription"
dead_letter_topic = "media_low_res_events_dead_letter"
timeout_in_seconds = 10

[storage]
hires_input_bucket = ""
lowres_output_bucket = ""

[embedding_models.multi-lingual]
model = "text-embedding-004"
MaxRequestsPerMinute = 100

[embedding_models.en-us]
model = "text-embedding-004"
MaxRequestsPerMinute = 100

[agent_models.creative-flash]
model = "gemini-1.5-flash-002"
temperature = 0.8
top_p = 0.5
top_k = 30
max_tokens = 8192
system_instructions = """
Your role is a film, and media trailer official capable of describing
in detail directors, producers, cinematographers, screenwriters, and actors.
In addition, you're able to summarize plot points, identify scene time stamps
and recognize which actor is playing which character, and which character is in each scene.
"""
output_format = "application/json"
rate_limit = 200

[agent_models."creative-pro"]
model = "gemini-1.5-flash-002"
temperature = 0.8
top_p = 0.5
top_k = 30
max_tokens = 8192
output_format = "application/json"
enable_google = true
rate_limit = 100

[agent_models."critical-flash"]
model = "gemini-1.5-flash"
temperature = 0.2
top_p = 0.5
top_k = 30
max_tokens = 8192
output_format = "application/json"
rate_limit = 200

[agent_models."critical-pro"]
model = "gemini-1.5-flash"
temperature = 0.2
top_p = 0.5
top_k = 30
max_tokens = 8192
output_format = "application/json"
enable_google = true
rate_limit = 200


[categories.trailer]
name = "Trailer"
definition = "A short advertisement or clip of a single movie"
system_instructions = ""
summary = ""
scenee = ""

[categories."trailer_comp"]
name = "Tailer Composition"
definition = "A collection of multiple trailers for different movies"
system_instructions = ""

[categories.movie]
name = "Movie"
definition = "A feature length film"
system_instructions = ""

[categories.news]
name = "News"
definition = "A news clip and/or news broadcast"
system_instructions = ""

[categories.sports]
name = "Sports"
definition = "A feature length sporting event that may or may not include commercials"
system_instructions = ""

# Below this line are prompt template definitions
[prompt_templates]
summary = """Review the attached media file and extract the following information
- Title as title
- Lower case category name as category from one of the following categories and definitions:
    - {{ .CATEGORIES }}
- Summary - a detailed summary of the media contents, plot, and cinematic themes in markdown format
- Length in Seconds as length_in_seconds,
- Media URL as media_url
- Director as director
- Release Year as release_year, a four digit year
- Genre as genre
- Rating as rating with one of the following values: G, PG, PG-13, R, NC-17
- Cast as cast, an array of Cast Members including Character Name as character_name, and associated actor name as actor_name
- Extract the scenes and order by start and end times in the format of HH:MM:SS or hours:minutes:seconds as two digits numbers left padded by zeros.
    - All scenes should have a minimum length of 10 seconds.
- Add a sequence number to each scene starting from 1 and incrementing in order of the timestamp

Example Output Format:
{{ .EXAMPLE_JSON }}
"""

scene = """Given the following media file, summary, actors, and characters, extract the following details between time frames {{ .TIME_START }} - {{ .TIME_END }} in json format.
- sequence_number: {{ .SEQUENCE }} as a number
- start: {{ .TIME_START }} as a string
- end: {{ .TIME_END }} as a string
- script: write a detailed scene description that includes colors, action sequences, dialog with both character and actor citations, any products or brand names, and lastly any significant promps in as plain text

Media Summary:
{{ .SUMMARY_DOCUMENT }}

Example Output:
{{ .EXAMPLE_JSON }}"""