load("@aspect_rules_js//js:defs.bzl", "js_library", "js_run_binary", "js_run_devserver")
load("@aspect_rules_swc//swc:defs.bzl", "swc")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config", "ts_project")
load("@bazel_skylib//lib:partial.bzl", "partial")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//web/apps/media-search:tsconfig-to-swcconfig/package_json.bzl", tsconfig_to_swcconfig = "bin")
load("@npm//web/apps/media-search:vite/package_json.bzl", vite_bin = "bin")

npm_link_all_packages()

CONFIGS = [
    "tsconfig.app.json",
    "tsconfig.json",
    "tsconfig.node.json",
    "vite.config.mts",
]

RUNTIME_DEPS = [
    "index.html",
    "//web/apps/media-search/public",
    "//web/apps/media-search/src",
    ":node_modules/@emotion/react",
    ":node_modules/@emotion/styled",
    ":node_modules/@mui/icons-material",
    ":node_modules/@mui/material",
    ":node_modules/@vitejs/plugin-react",
    ":node_modules/@vitejs/plugin-react-swc",
    ":node_modules/axios",
    ":node_modules/react",
    ":node_modules/react-dom",
    ":node_modules/react-drag-drop-files",
    ":node_modules/react-router-dom",
]

DEV_DEPS = [
    ":node_modules/tsconfig-to-swcconfig",
    ":node_modules/@vitejs/plugin-react-swc",
    ":node_modules/@bazel/ibazel",
    ":node_modules/@eslint/js",
    ":node_modules/@types/react",
    ":node_modules/@types/react-dom",
    ":node_modules/eslint",
    ":node_modules/eslint-plugin-react-hooks",
    ":node_modules/eslint-plugin-react-refresh",
    ":node_modules/globals",
    ":node_modules/typescript",
    ":node_modules/typescript-eslint",
    ":node_modules/vite",
]

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = ["//visibility:public"],
)

# Configure the transpiler
tsconfig_to_swcconfig.t2s(
    name = "write_swcrc",
    srcs = CONFIGS,
    args = [
        "--filename",
        "$(location tsconfig.json)",
    ],
    stdout = ".swcrc",
)

js_library(
    name = "package_json",
    srcs = ["package.json"],
)

js_library(
    name = "assets",
    srcs = glob(["src/assets/**/*"]),
)

ts_project(
    name = "media-search",
    srcs = [
        "index.html",
        "tsconfig.app.json",
        "tsconfig.node.json",
        ":assets",
        ":package_json",
    ],
    data = [
        ":write_swcrc",
        "//web/apps/media-search/public",
        "//web/apps/media-search/src",
    ],
    tsconfig = ":tsconfig",
)

js_library(
    name = "vite.config",
    srcs = CONFIGS,
    data = DEV_DEPS,
)

vite_bin.vite_binary(
    name = "vite",
    chdir = package_name(),
    data = [
        ":vite.config",
    ] + DEV_DEPS,
)

js_run_binary(
    name = "build",
    srcs = RUNTIME_DEPS,
    args = ["build"],
    mnemonic = "ViteBuild",
    out_dirs = ["dist"],
    tool = ":vite",
)

# Runs using iBazel
#js_run_devserver(
#    name = "start",
#    args = ["."],
#    data = RUNTIME_DEPS,
#    tool = ":vite",
#)

vite_bin.vite_binary(
    name = "dev",
    args = [
        "preview",
        "--port",
        "4000",
        "--mode",
        "dev",
    ],
    chdir = package_name(),
    data = [":build"],
    visibility = ["//visibility:public"],
)

# Hosts the production-bundled application in a web server
vite_bin.vite_binary(
    name = "preview",
    args = ["preview"],
    chdir = package_name(),
    data = [":build"],
)
